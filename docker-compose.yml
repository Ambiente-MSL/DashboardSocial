services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: dashboardsocial-backend:latest
    env_file:
      - ./deploy/backend.env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:3001/api/instagram/posts?limit=1"]
      interval: 30s
      timeout: 5s
      retries: 5
    # Conecta a rede do Traefik
    networks:
      - root_default

  worker:
    build:
      context: ./backend
    env_file:
      - ./deploy/backend.env
    command: >
      sh -c "python - << 'PY'
      from scheduler import MetaSyncScheduler
      import time
      s = MetaSyncScheduler()
      s.start()
      while True:
        time.sleep(3600)
      PY"
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - root_default

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        REACT_APP_SUPABASE_URL: ${REACT_APP_SUPABASE_URL}
        REACT_APP_SUPABASE_ANON_KEY: ${REACT_APP_SUPABASE_ANON_KEY}
        REACT_APP_API_URL: ""
    restart: unless-stopped
    networks:
      - root_default
  caddy:
    image: caddy:2
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    # Labels para o Traefik gerenciar este container
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitor.rule=Host(`monitor.mslestrategia.com.br`)"
      - "traefik.http.routers.monitor.entrypoints=web,websecure"
      - "traefik.http.routers.monitor.tls=true"
      - "traefik.http.routers.monitor.tls.certresolver=mytlschallenge"
      - "traefik.http.services.monitor.loadbalancer.server.port=80"
    networks:
      - root_default

volumes:
  caddy_data:
  caddy_config:

networks:
  root_default:
    external: true